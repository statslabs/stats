//
// Created by Yi Pan (Institute of Cancer and Genomic Sciences) on 27/07/2018.
//

#ifndef STATSLABS_STATS_MATHLIB_H
#define STATSLABS_STATS_MATHLIB_H

/* Random Number Generators */

using ::norm_rand;
using ::unif_rand;
using ::exp_rand;
using ::set_seed;
using ::get_seed;

/* Normal Distribution */

using ::dnorm;
using ::pnorm;
using ::qnorm;
using ::rnorm;
using ::pnorm_both;  /* both tails */

/* Uniform Distribution */

using ::dunif;
using ::punif;
using ::qunif;
using ::runif;

/* Gamma Distribution */

using ::dgamma;
using ::pgamma;
using ::qgamma;
using ::rgamma;

using ::log1pmx;
using ::log1pexp;
using ::lgamma1p;
using ::logspace_add;
using ::logspace_sub;
using ::logspace_sum;

/* Beta Distribution */

using ::dbeta;
using ::pbeta;
using ::qbeta;
using ::rbeta;

/* Lognormal Distribution */

using ::dlnorm;
using ::plnorm;
using ::qlnorm;
using ::rlnorm;

/* Chi-squared Distribution */

using ::dchisq;
using ::pchisq;
using ::qchisq;
using ::rchisq;

/* Non-central Chi-squared Distribution */

using ::dnchisq;
using ::pnchisq;
using ::qnchisq;
using ::rnchisq;

/* F Distibution */

using ::df;
using ::pf;
using ::qf;
using ::rf;

/* Student t Distibution */

using ::dt;
using ::pt;
using ::qt;
using ::rt;

/* Binomial Distribution */

using ::dbinom_raw;
using ::dbinom;
using ::pbinom;
using ::qbinom;
using ::rbinom;

/* Multnomial Distribution */

using ::rmultinom;

/* Cauchy Distribution */

using ::dcauchy;
using ::pcauchy;
using ::qcauchy;
using ::rcauchy;

/* Exponential Distribution */

using ::dexp;
using ::pexp;
using ::qexp;
using ::rexp;

/* Geometric Distribution */

using ::dgeom(double, double, int);
using ::pgeom(double, double, int, int);
using ::qgeom(double, double, int, int);
using ::rgeom(double);

/* Hypergeometric Distibution */

using ::dhyper(double, double, double, double, int);
using ::phyper(double, double, double, double, int, int);
using ::qhyper(double, double, double, double, int, int);
using ::rhyper(double, double, double);

/* Negative Binomial Distribution */

using ::dnbinom(double, double, double, int);
using ::pnbinom(double, double, double, int, int);
using ::qnbinom(double, double, double, int, int);
using ::rnbinom(double, double);

using ::dnbinom_mu(double, double, double, int);
using ::pnbinom_mu(double, double, double, int, int);
using ::qnbinom_mu(double, double, double, int, int);
using ::rnbinom_mu(double, double);

/* Poisson Distribution */

using ::dpois_raw (double, double, int);
using ::dpois(double, double, int);
using ::ppois(double, double, int, int);
using ::qpois(double, double, int, int);
using ::rpois(double);

/* Weibull Distribution */

using ::dweibull(double, double, double, int);
using ::pweibull(double, double, double, int, int);
using ::qweibull(double, double, double, int, int);
using ::rweibull(double, double);

/* Logistic Distribution */

using ::dlogis(double, double, double, int);
using ::plogis(double, double, double, int, int);
using ::qlogis(double, double, double, int, int);
using ::rlogis(double, double);

/* Non-central Beta Distribution */

using ::dnbeta(double, double, double, double, int);
using ::pnbeta(double, double, double, double, int, int);
using ::qnbeta(double, double, double, double, int, int);
using ::rnbeta(double, double, double);

/* Non-central F Distribution */

using ::dnf(double, double, double, double, int);
using ::pnf(double, double, double, double, int, int);
using ::qnf(double, double, double, double, int, int);

/* Non-central Student t Distribution */

using ::dnt(double, double, double, int);
using ::pnt(double, double, double, int, int);
using ::qnt(double, double, double, int, int);

/* Studentized Range Distribution */

using ::ptukey(double, double, double, double, int, int);
using ::qtukey(double, double, double, double, int, int);

/* Wilcoxon Rank Sum Distribution */

using ::dwilcox(double, double, double, int);
using ::pwilcox(double, double, double, int, int);
using ::qwilcox(double, double, double, int, int);
using ::rwilcox(double, double);

/* Wilcoxon Signed Rank Distribution */

using ::dsignrank(double, double, int);
using ::psignrank(double, double, int, int);
using ::qsignrank(double, double, int, int);
using ::rsignrank(double);

/* Gamma and Related Functions */
using ::gammafn(double);
using ::lgammafn(double);
using ::lgammafn_sign(double, int*);
using ::dpsifn(double, int, int, int, double*, int*, int*);
using ::psigamma(double, double);
using ::digamma(double);
using ::trigamma(double);
using ::tetragamma(double);
using ::pentagamma(double);

using ::beta;
using ::lbeta;

using ::choose;
using ::lchoose;

/* Bessel Functions */

using ::bessel_i;
using ::bessel_j;
using ::bessel_k;
using ::bessel_y;
using ::bessel_i_ex;
using ::bessel_j_ex;
using ::bessel_k_ex;
using ::bessel_y_ex;


#endif //STATSLABS_STATS_MATHLIB_H
